type User {
    id: ID!
    name: String!
    email: String!
    email_verified_at: DateTime
    created_at: DateTime
    updated_at: DateTime
}

input CreateUserInput {
    name: String! @rules(apply: ["min:2", "max:50"])
    email: String! @rules(apply: ["email", "unique:users,email"])
    password: String! @rules(apply: ["min:8"])
}

input UpdateUserInput {
    id: ID! @whereKey
    name: String @rules(apply: ["min:2", "max:50"])
    email: String @rules(apply: ["email", "unique:users,email"])
    password: String @rules(apply: ["min:8"])
}

input UpsertUserInput {
    id: ID # Optional; if provided, it will update; if not, it will create
    name: String @rules(apply: ["min:2", "max:50"])
    email: String @rules(apply: ["email", "unique:users,email"])
    password: String @rules(apply: ["min:8"])
}

type Query {
    user(id: ID! @eq): User @find
    users: [User!]! @all
    usersPaginate: [User!]! @paginate
}

type Mutation {
    createUser(input: CreateUserInput! @spread): User! @create
    updateUser(input: UpdateUserInput! @spread): User! @update
    upsertUser(input: UpsertUserInput! @spread): User! @upsert
    deleteUser(id: ID! @whereKey): User @delete
}
